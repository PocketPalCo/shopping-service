name: Deploy Shopping Service

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.HETZNER_SSH_PRIVATE_KEY }}

    - name: Add Hetzner server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.HETZNER_SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Test SSH connection
      run: |
        ssh -o ConnectTimeout=10 root@${{ secrets.HETZNER_SERVER_IP }} "echo 'SSH connection successful'"

    - name: Install dependencies on server
      run: |
        ssh root@${{ secrets.HETZNER_SERVER_IP }} << 'EOF'
          # Install Go if not present
          if ! command -v go &> /dev/null; then
            wget https://go.dev/dl/go1.25.1.linux-amd64.tar.gz
            tar -C /usr/local -xzf go1.25.1.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> /etc/profile
          fi


          echo "Dependencies ready"
        EOF

    - name: Create deployment directory and copy files
      run: |
        ssh root@${{ secrets.HETZNER_SERVER_IP }} "mkdir -p /opt/shopping-service"
        scp -r * root@${{ secrets.HETZNER_SERVER_IP }}:/opt/shopping-service/

    - name: Create production environment file
      run: |
        ssh root@${{ secrets.HETZNER_SERVER_IP }} << 'EOF'
          cd /opt/shopping-service

          # Create .env file from secrets
          cat > .env << 'ENV_EOF'
          SSV_ENVIRONMENT=production
          SSV_SERVER_BIND_ADDR=0.0.0.0:3009
          SSV_LOG_FORMAT=json
          SSV_LOG_LEVEL=info
          SSV_DB_HOST=localhost
          SSV_DB_PORT=5432
          SSV_DB_USER=postgres
          SSV_DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          SSV_DB_DATABASE=pocket-pal
          SSV_REDIS_HOST=localhost
          SSV_REDIS_PORT=6379
          SSV_REDIS_PASS=${{ secrets.REDIS_PASSWORD }}
          SSV_OTLP_ENDPOINT=localhost:4317
          SSV_TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          SSV_TELEGRAM_ADMINS=${{ secrets.TELEGRAM_ADMINS }}
          ENV_EOF
        EOF

    - name: Deploy shopping service
      run: |
        ssh root@${{ secrets.HETZNER_SERVER_IP }} << 'EOF'
          cd /opt/shopping-service
          export PATH=$PATH:/usr/local/go/bin

          # Stop existing service and containers
          systemctl stop shopping-service || true
          docker compose -f docker-compose.prod.yml down || true

          # Start database containers
          docker compose -f docker-compose.prod.yml up -d

          # Wait for database
          echo "Waiting for database to be ready..."
          sleep 15

          # Build the service
          echo "Building shopping service..."
          go mod tidy
          go build -o shopping-service cmd/main.go

          # Create systemd service that uses .env file
          cat > /etc/systemd/system/shopping-service.service << 'SERVICE_EOF'
          [Unit]
          Description=Shopping Service
          After=network.target docker.service
          Wants=docker.service

          [Service]
          Type=simple
          User=root
          WorkingDirectory=/opt/shopping-service
          ExecStart=/opt/shopping-service/shopping-service
          Restart=always
          RestartSec=5
          EnvironmentFile=/opt/shopping-service/.env

          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF

          # Start the service
          systemctl daemon-reload
          systemctl enable shopping-service
          systemctl restart shopping-service

          echo "Deployment completed!"
        EOF

    - name: Verify deployment
      run: |
        ssh root@${{ secrets.HETZNER_SERVER_IP }} << 'EOF'
          echo "=== Service Status ==="
          systemctl status shopping-service --no-pager

          echo ""
          echo "=== Health Check ==="
          # Wait for service to fully start
          sleep 10
          curl -f http://localhost:3009/health || echo "Health check failed (service may still be starting)"

          echo ""
          echo "=== Service Logs (last 20 lines) ==="
          journalctl -u shopping-service --no-pager -n 20

          echo ""
          echo "=== Port Check ==="
          netstat -tlnp | grep :3009 || echo "Service not listening on port 3009"

          echo ""
          echo "=== Process Check ==="
          ps aux | grep shopping-service | grep -v grep || echo "Shopping service process not found"
        EOF

    - name: Create deployment summary
      run: |
        cat << 'EOF' >> $GITHUB_STEP_SUMMARY
        ## üöÄ Shopping Service Deployment

        **Environment**: ${{ github.event.inputs.environment || 'production' }}
        **Server**: ${{ secrets.HETZNER_SERVER_IP }}
        **Commit**: ${{ github.sha }}

        ### üîß Service Details:
        - **API Endpoint**: http://${{ secrets.HETZNER_SERVER_IP }}:3009
        - **Health Check**: http://${{ secrets.HETZNER_SERVER_IP }}:3009/health
        - **Environment**: Production
        - **OTLP Endpoint**: Connected to observability stack
        - **Database**: PostgreSQL via Docker Compose

        ### üìä Monitoring:
        - **Logs**: Available in Grafana/Loki
        - **Metrics**: Available in Prometheus/Grafana
        - **Traces**: Available in Jaeger
        - **System Logs**: `journalctl -u shopping-service -f`

        ### üóÉÔ∏è Database:
        - **Migrations**: Run separately via Migration workflow
        - **Manual Migration**: Use Migration workflow in Actions tab

        **Deployment Status**: ‚úÖ Complete
        EOF

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify deployment result
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Shopping service deployed successfully to ${{ secrets.HETZNER_SERVER_IP }}:3009"
        else
          echo "‚ùå Shopping service deployment failed"
        fi