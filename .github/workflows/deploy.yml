name: Deploy Shopping Service

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.HETZNER_SSH_PRIVATE_KEY }}

    - name: Add Hetzner server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.HETZNER_SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Test SSH connection
      run: |
        ssh -o ConnectTimeout=10 root@${{ secrets.HETZNER_SERVER_IP }} "echo 'SSH connection successful'"

    - name: Install dependencies on server
      run: |
        ssh root@${{ secrets.HETZNER_SERVER_IP }} << 'EOF'
          # Install Go for ARM64
          if ! command -v go &> /dev/null; then
            echo "Installing Go for ARM64..."
            wget https://go.dev/dl/go1.25.1.linux-arm64.tar.gz
            tar -C /usr/local -xzf go1.25.1.linux-arm64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> /etc/profile
            rm -f go1.25.1.linux-arm64.tar.gz
          fi

          # Clean up and install migrate for ARM64
          if command -v migrate &> /dev/null; then
            if ! migrate -version &> /dev/null; then
              echo "Removing corrupt migrate binary..."
              rm -f /usr/local/bin/migrate
            fi
          fi

          if ! command -v migrate &> /dev/null; then
            echo "Installing migrate tool for ARM64..."
            cd /tmp
            curl -L https://github.com/golang-migrate/migrate/releases/download/v4.19.0/migrate.linux-arm64.tar.gz -o migrate.tar.gz
            tar -xzf migrate.tar.gz
            mv migrate /usr/local/bin/migrate
            chmod +x /usr/local/bin/migrate
            rm -f migrate.tar.gz LICENSE README.md
            cd -
          fi

          if ! command -v file &> /dev/null; then
            echo "Installing file command..."
            apt-get update && apt-get install -y file
          fi

          echo "Dependencies ready"
          go version
          migrate -version
          file $(which migrate)
        EOF

    - name: Create deployment directory and copy files
      run: |
        ssh root@${{ secrets.HETZNER_SERVER_IP }} "mkdir -p /opt/shopping-service"
        scp -r * root@${{ secrets.HETZNER_SERVER_IP }}:/opt/shopping-service/

    - name: Create production environment file
      run: |
        ssh root@${{ secrets.HETZNER_SERVER_IP }} "cd /opt/shopping-service && cat > .env" << 'EOF'
        SSV_ENVIRONMENT=${{ vars.SSV_ENVIRONMENT || 'production' }}
        SSV_SERVER_BIND_ADDR=${{ vars.SSV_SERVER_BIND_ADDR || '0.0.0.0:3009' }}
        SSV_SERVER_READ_TIMEOUT=${{ vars.SSV_SERVER_READ_TIMEOUT || '60' }}
        SSV_LOG_FORMAT=${{ vars.SSV_LOG_FORMAT || 'json' }}
        SSV_LOG_LEVEL=${{ vars.SSV_LOG_LEVEL || 'info' }}
        SSV_RATE_LIMIT_MAX=${{ vars.SSV_RATE_LIMIT_MAX || '1000' }}
        SSV_RATE_LIMIT_WINDOW=${{ vars.SSV_RATE_LIMIT_WINDOW || '60' }}
        SSV_DB_HOST=${{ vars.SSV_DB_HOST }}
        SSV_DB_PORT=${{ vars.SSV_DB_PORT }}
        SSV_DB_SSL=${{ vars.SSV_DB_SSL }}
        SSV_DB_USER=${{ vars.SSV_DB_USER }}
        SSV_DB_PASSWORD=${{ secrets.SSV_DB_PASSWORD }}
        SSV_DB_DATABASE=${{ vars.SSV_DB_DATABASE }}
        SSV_DB_MAX_CONNECTIONS=${{ vars.SSV_DB_MAX_CONNECTIONS }}
        SSV_REDIS_HOST=${{ vars.SSV_REDIS_HOST }}
        SSV_REDIS_PORT=${{ vars.SSV_REDIS_PORT }}
        SSV_REDIS_DB=${{ vars.SSV_REDIS_DB }}
        SSV_REDIS_USER=${{ vars.SSV_REDIS_USER }}
        SSV_REDIS_PASS=${{ secrets.SSV_REDIS_PASS }}
        SSV_OTLP_ENDPOINT=${{ vars.SSV_OTLP_ENDPOINT }}
        SSV_JAEGER_ENDPOINT=${{ vars.SSV_JAEGER_ENDPOINT }}
        SSV_TELEGRAM_BOT_TOKEN=${{ secrets.SSV_TELEGRAM_BOT_TOKEN }}
        SSV_TELEGRAM_DEBUG=${{ vars.SSV_TELEGRAM_DEBUG }}
        SSV_TELEGRAM_ADMINS=${{ secrets.SSV_TELEGRAM_ADMINS }}
        SSV_OPENAI_API_KEY=${{ secrets.SSV_OPENAI_API_KEY }}
        SSV_OPENAI_MODEL=${{ vars.SSV_OPENAI_MODEL }}
        SSV_OPENAI_BASE_URL=${{ vars.SSV_OPENAI_BASE_URL }}
        SSV_OPENAI_MAX_TOKENS=${{ vars.SSV_OPENAI_MAX_TOKENS }}
        SSV_OPENAI_TEMPERATURE=${{ vars.SSV_OPENAI_TEMPERATURE }}
        SSV_AZURE_SPEECH_KEY=${{ secrets.SSV_AZURE_SPEECH_KEY }}
        SSV_AZURE_SPEECH_REGION=${{ vars.SSV_AZURE_SPEECH_REGION }}
        SSV_CLOUD_PROVIDER=${{ vars.SSV_CLOUD_PROVIDER }}
        SSV_AZURE_STORAGE_CONNECTION_STRING=${{ secrets.SSV_AZURE_STORAGE_CONNECTION_STRING }}
        SSV_AZURE_STORAGE_CONTAINER_NAME=${{ vars.SSV_AZURE_STORAGE_CONTAINER_NAME }}
        SSV_AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT=${{ vars.SSV_AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT }}
        SSV_AZURE_DOCUMENT_INTELLIGENCE_API_KEY=${{ secrets.SSV_AZURE_DOCUMENT_INTELLIGENCE_API_KEY }}
        SSV_AZURE_DOCUMENT_INTELLIGENCE_API_VERSION=${{ vars.SSV_AZURE_DOCUMENT_INTELLIGENCE_API_VERSION }}
        SSV_AZURE_DOCUMENT_INTELLIGENCE_RECEIPT_MODEL=${{ vars.SSV_AZURE_DOCUMENT_INTELLIGENCE_RECEIPT_MODEL }}
        EOF

    - name: Deploy shopping service
      run: |
        ssh root@${{ secrets.HETZNER_SERVER_IP }} << 'EOF'
          set -e
          cd /opt/shopping-service
          echo "Building and deploying shopping service containers..."

          # Build and deploy with docker compose
          docker compose -f docker-compose.prod.yml build --no-cache shopping-service
          docker compose -f docker-compose.prod.yml up -d

          echo "=== Checking container status ==="
          docker compose -f docker-compose.prod.yml ps

          echo "=== Checking shopping service logs ==="
          docker compose -f docker-compose.prod.yml logs --tail=20 shopping-service

          echo "=== Health check ==="
          sleep 30
          curl -f http://localhost:3009/health || echo "Health check failed (service may still be starting)"

          echo "Deployment completed!"
        EOF

    - name: Verify deployment
      run: |
        ssh root@${{ secrets.HETZNER_SERVER_IP }} << 'EOF'
          cd /opt/shopping-service
          echo "=== Container Status ==="
          docker compose -f docker-compose.prod.yml ps
          echo ""
          echo "=== Health Check ==="
          sleep 10
          curl -f http://localhost:3009/health || echo "Health check failed (service may still be starting)"
          echo ""
          echo "=== Shopping Service Logs (last 30 lines) ==="
          docker compose -f docker-compose.prod.yml logs --tail=30 shopping-service
          echo ""
          echo "=== Port Check ==="
          netstat -tlnp | grep :3009 || echo "Service not listening on port 3009"
          echo ""
          echo "=== Network Connectivity Check ==="
          docker compose -f docker-compose.prod.yml exec -T shopping-service nslookup ${{ vars.SSV_DB_HOST }} || echo "Cannot resolve database hostname"
          docker compose -f docker-compose.prod.yml exec -T shopping-service nslookup ${{ vars.SSV_REDIS_HOST }} || echo "Cannot resolve redis hostname"
        EOF

    - name: Create deployment summary
      run: |
        cat << 'EOF' >> $GITHUB_STEP_SUMMARY
        ## üöÄ Shopping Service Deployment

        **Environment**: ${{ github.event.inputs.environment || 'production' }}
        **Server**: ${{ secrets.HETZNER_SERVER_IP }}
        **Commit**: ${{ github.sha }}

        ### üîß Service Details:
        - **API Endpoint**: http://${{ secrets.HETZNER_SERVER_IP }}:3009
        - **Health Check**: http://${{ secrets.HETZNER_SERVER_IP }}:3009/health
        - **Environment**: Production
        - **OTLP Endpoint**: Connected to observability stack
        - **Database**: PostgreSQL via Docker Compose

        ### üìä Monitoring:
        - **Logs**: Available in Grafana/Loki
        - **Metrics**: Available in Prometheus/Grafana
        - **Traces**: Available in Jaeger
        - **System Logs**: `journalctl -u shopping-service -f`

        ### üóÉÔ∏è Database:
        - **Migrations**: Run separately via Migration workflow
        - **Manual Migration**: Use Migration workflow in Actions tab

        **Deployment Status**: ‚úÖ Complete
        EOF

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify deployment result
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Shopping service deployed successfully to ${{ secrets.HETZNER_SERVER_IP }}:3009"
        else
          echo "‚ùå Shopping service deployment failed"
        fi