name: Run Database Migrations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to migrate'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      direction:
        description: 'Migration direction'
        required: true
        default: 'up'
        type: choice
        options:
          - up
          - down
      steps:
        description: 'Number of steps (for down migrations only)'
        required: false
        default: '1'
        type: string

jobs:
  migrate:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.migrate.outputs.url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.HETZNER_SSH_PRIVATE_KEY }}

    - name: Add Hetzner server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.HETZNER_SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Install migrate tool on server
      run: |
        ssh root@${{ secrets.HETZNER_SERVER_IP }} << 'EOF'
          echo "Checking architecture: $(uname -m)"

          # Remove existing migrate if it's wrong architecture
          if command -v migrate &> /dev/null; then
            if ! migrate -version &> /dev/null; then
              echo "Removing corrupt migrate binary..."
              rm -f /usr/local/bin/migrate
            fi
          fi

          if ! command -v migrate &> /dev/null; then
            echo "Installing migrate tool..."
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"

            cd /tmp
            if [ "$ARCH" = "aarch64" ]; then
              echo "Downloading ARM64 migrate..."
              curl -L https://github.com/golang-migrate/migrate/releases/download/v4.19.0/migrate.linux-arm64.tar.gz -o migrate.tar.gz
            else
              echo "Downloading AMD64 migrate..."
              curl -L https://github.com/golang-migrate/migrate/releases/download/v4.19.0/migrate.linux-amd64.tar.gz -o migrate.tar.gz
            fi

            tar -xzf migrate.tar.gz
            mv migrate /usr/local/bin/migrate
            chmod +x /usr/local/bin/migrate
            rm -f migrate.tar.gz LICENSE README.md
            cd -
          fi

          if ! command -v file &> /dev/null; then
            echo "Installing file command..."
            apt-get update && apt-get install -y file
          fi

          echo "Testing migrate binary..."
          file /usr/local/bin/migrate
          migrate -version
        EOF

    - name: Copy migration files
      run: |
        ssh root@${{ secrets.HETZNER_SERVER_IP }} "mkdir -p /opt/shopping-service/migrations"
        scp -r migrations/* root@${{ secrets.HETZNER_SERVER_IP }}:/opt/shopping-service/migrations/

    - name: Run database migrations
      run: |
        ssh root@${{ secrets.HETZNER_SERVER_IP }} << 'EOF'
          cd /opt/shopping-service
          if [ ! -d "migrations" ]; then
            echo "‚ùå No migrations directory found"
            exit 1
          fi
          MIGRATION_COUNT=$(find migrations -name "*.sql" | wc -l)
          echo "Found $MIGRATION_COUNT migration files"
          if [ $MIGRATION_COUNT -eq 0 ]; then
            echo "‚ùå No migration files found"
            exit 1
          fi
          echo "=== Debug Database Configuration ==="
          echo "DB_HOST: ${{ vars.SSV_DB_HOST }}"
          echo "DB_PORT: ${{ vars.SSV_DB_PORT }}"
          echo "DB_DATABASE: ${{ vars.SSV_DB_DATABASE }}"
          echo "DB_SSL: ${{ vars.SSV_DB_SSL }}"
          echo "DB_USER: [REDACTED]"
          echo "DB_PASSWORD: [REDACTED]"
          echo "========================================"

          DB_URL="postgresql://${{ secrets.SSV_DB_USER }}:${{ secrets.SSV_DB_PASSWORD }}@${{ vars.SSV_DB_HOST }}:${{ vars.SSV_DB_PORT }}/${{ vars.SSV_DB_DATABASE }}?sslmode=${{ vars.SSV_DB_SSL }}"
          echo "Testing database connection..."
          echo "Connection string: postgresql://${{ secrets.SSV_DB_USER }}:[REDACTED]@${{ vars.SSV_DB_HOST }}:${{ vars.SSV_DB_PORT }}/${{ vars.SSV_DB_DATABASE }}?sslmode=${{ vars.SSV_DB_SSL }}"

          VERSION_OUTPUT=$(migrate -path migrations -database "$DB_URL" version 2>&1)
          if echo "$VERSION_OUTPUT" | grep -q "no migration"; then
            echo "‚úÖ Database connected successfully (no migrations table yet - this is normal for first run)"
          elif echo "$VERSION_OUTPUT" | grep -q "error"; then
            echo "‚ùå Cannot connect to database: $VERSION_OUTPUT"
            exit 1
          else
            echo "‚úÖ Database connected successfully"
            echo "Current migration version: $VERSION_OUTPUT"
          fi
          echo "Current migration version:"
          migrate -path migrations -database "$DB_URL" version
          if [ "${{ github.event.inputs.direction }}" = "up" ]; then
            echo "üîÑ Running UP migrations..."
            migrate -path migrations -database "$DB_URL" up
          elif [ "${{ github.event.inputs.direction }}" = "down" ]; then
            STEPS="${{ github.event.inputs.steps }}"
            echo "üîÑ Running DOWN migrations ($STEPS steps)..."
            migrate -path migrations -database "$DB_URL" down $STEPS
          fi
          echo "Final migration version:"
          migrate -path migrations -database "$DB_URL" version
          echo "‚úÖ Migration completed successfully!"
        EOF

    - name: Verify migration result
      run: |
        ssh root@${{ secrets.HETZNER_SERVER_IP }} << 'EOF'
          cd /opt/shopping-service
          DB_URL="postgresql://${{ secrets.SSV_DB_USER }}:${{ secrets.SSV_DB_PASSWORD }}@${{ vars.SSV_DB_HOST }}:${{ vars.SSV_DB_PORT }}/${{ vars.SSV_DB_DATABASE }}?sslmode=${{ vars.SSV_DB_SSL }}"
          echo "=== Migration Status ==="
          migrate -path migrations -database "$DB_URL" version
          echo ""
          echo "=== Database Tables ==="
          docker exec shopping-service-db psql -U postgres -d pocket-pal -c "\dt" || echo "Could not list tables"
          echo ""
          echo "=== Migration History ==="
          docker exec shopping-service-db psql -U postgres -d pocket-pal -c "SELECT version, dirty FROM schema_migrations ORDER BY version;" || echo "No migration history table"
        EOF

    - name: Create migration summary
      run: |
        cat << 'EOF' >> $GITHUB_STEP_SUMMARY
        ## üóÉÔ∏è Database Migration

        **Environment**: ${{ github.event.inputs.environment || 'production' }}
        **Direction**: ${{ github.event.inputs.direction }}
        **Steps**: ${{ github.event.inputs.steps }}
        **Server**: ${{ secrets.HETZNER_SERVER_IP }}
        **Commit**: ${{ github.sha }}

        ### Migration Details:
        - **Database**: pocket-pal
        - **Migration Path**: `/opt/shopping-service/migrations`
        - **Connection**: PostgreSQL via localhost:5432

        ### üîß Manual Commands:
        ```bash
        # SSH to server
        ssh root@${{ secrets.HETZNER_SERVER_IP }}
        cd /opt/shopping-service

        # Check current version
        migrate -path migrations -database "postgresql://postgres:PASSWORD@localhost:5432/pocket-pal?sslmode=disable" version

        # Run migrations manually
        migrate -path migrations -database "postgresql://postgres:PASSWORD@localhost:5432/pocket-pal?sslmode=disable" up
        ```

        **Migration Status**: ‚úÖ Complete
        EOF

  notify:
    needs: migrate
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify migration result
      run: |
        if [ "${{ needs.migrate.result }}" == "success" ]; then
          echo "‚úÖ Database migration (${{ github.event.inputs.direction }}) completed successfully"
        else
          echo "‚ùå Database migration failed"
        fi